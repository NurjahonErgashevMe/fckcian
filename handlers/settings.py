import os
import json
import re
import asyncio
import cianparser
from datetime import datetime
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    FSInputFile, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    ReplyKeyboardRemove
)
from utils import file_utils, log_utils
from keyboards.settings import (
    create_main_keyboard,
    create_rooms_keyboard,
    create_floor_range_keyboard,
    create_floor_selection_keyboard,
    create_price_keyboard,
    create_author_types_keyboard
)

router = Router()

class RegionState(StatesGroup):
    waiting_region_name = State()

class RoomState(StatesGroup):
    selecting_rooms = State()

class MinFloorState(StatesGroup):
    selecting_range = State()
    selecting_floors = State()

class MaxFloorState(StatesGroup):
    selecting_range = State()
    selecting_floors = State()

class PriceState(StatesGroup):
    min_price = State()
    max_price = State()

class AuthorTypesState(StatesGroup):
    selecting = State()

async def check_admin_access(user_id: int, message: types.Message = None, callback: types.CallbackQuery = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞"""
    if str(user_id) != os.getenv("TELEGRAM_ADMIN_ID"):
        if message:
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        if callback:
            await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", show_alert=True)
        return False
    return True

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    if not await check_admin_access(message.from_user.id, message=message):
        return
        
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_main_keyboard()
    )

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞")
async def parsing_settings(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    if not await check_admin_access(message.from_user.id, message=message):
        return
        
    current_region = file_utils.get_region_name()
    region_id = file_utils.get_region_id()
    current_rooms = file_utils.get_rooms()
    current_min_floor = file_utils.get_min_floor()
    current_max_floor = file_utils.get_max_floor()
    current_min_price = file_utils.get_min_price()
    current_max_price = file_utils.get_max_price()
    auto_parse_enabled = file_utils.get_setting('auto_parse_enabled', '0') == '1'
    current_authors = file_utils.get_author_types()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —ç—Ç–∞–∂–∏
    min_floor_text = "–Ω–µ –∑–∞–¥–∞–Ω–æ" if not current_min_floor else ", ".join(map(str, current_min_floor))
    max_floor_text = "–Ω–µ –∑–∞–¥–∞–Ω–æ" if not current_max_floor else ", ".join(map(str, current_max_floor))
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
    min_price_text = "–Ω–µ –∑–∞–¥–∞–Ω–æ" if not current_min_price else f"{current_min_price:,} ‚ÇΩ".replace(",", " ")
    max_price_text = "–Ω–µ –∑–∞–¥–∞–Ω–æ" if not current_max_price else f"{current_max_price:,} ‚ÇΩ".replace(",", " ")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∞–≤—Ç–æ—Ä–æ–≤
    author_names = {
        'developer': 'üèóÔ∏è',
        'real_estate_agent': 'üè¢',
        'homeowner': 'üè†',
        'realtor': 'üëî'
    }
    authors_text = ", ".join([f"{author_names.get(a, '‚ùì')} {a}" for a in current_authors])
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω"), 
                KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤"), 
                KeyboardButton(text="üö™ –í—ã–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã")
            ],
            [
                KeyboardButton(text="üè¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–∞–∂–∏"), 
                KeyboardButton(text="üí∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–Ω—ã"), 
                KeyboardButton(text="üë• –¢–∏–ø—ã –∞–≤—Ç–æ—Ä–æ–≤")
            ],
            [
                KeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"), 
                KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
            ]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:</b>\n"
        f"‚Ä¢ <b>–†–µ–≥–∏–æ–Ω:</b> {current_region}\n"
        f"‚Ä¢ <b>ID —Ä–µ–≥–∏–æ–Ω–∞:</b> {region_id}\n"
        f"‚Ä¢ <b>–ö–æ–º–Ω–∞—Ç—ã:</b> {', '.join(map(str, current_rooms))}\n"
        f"‚Ä¢ <b>–ú–∏–Ω. —ç—Ç–∞–∂:</b> {min_floor_text}\n"
        f"‚Ä¢ <b>–ú–∞–∫—Å. —ç—Ç–∞–∂:</b> {max_floor_text}\n"
        f"‚Ä¢ <b>–ú–∏–Ω. —Ü–µ–Ω–∞:</b> {min_price_text}\n"
        f"‚Ä¢ <b>–ú–∞–∫—Å. —Ü–µ–Ω–∞:</b> {max_price_text}\n"
        f"‚Ä¢ <b>–¢–∏–ø—ã –∞–≤—Ç–æ—Ä–æ–≤:</b> {authors_text}\n"
        f"‚Ä¢ <b>–ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥:</b> {'‚úÖ –≤–∫–ª—é—á–µ–Ω' if auto_parse_enabled else '‚ùå –≤—ã–∫–ª—é—á–µ–Ω'}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.message(F.text.endswith("–¢–∏–ø—ã –∞–≤—Ç–æ—Ä–æ–≤"))
async def author_types_settings(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ—Ä–æ–≤"""
    if not await check_admin_access(message.from_user.id, message=message):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    current_types = file_utils.get_author_types()
    
    await state.set_state(AuthorTypesState.selecting)
    await message.answer(
        "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:",
        reply_markup=create_author_types_keyboard(current_types)
    )

@router.callback_query(AuthorTypesState.selecting, F.data.startswith("toggle_author_"))
async def toggle_author_type(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∞"""
    if not await check_admin_access(callback.from_user.id, callback=callback):
        return
        
    auth_type = callback.data.split("_")[-1]
    data = await state.get_data()
    selected_types = data.get("selected_types", file_utils.get_author_types())
    
    if auth_type in selected_types:
        selected_types.remove(auth_type)
    else:
        selected_types.append(auth_type)
    
    await state.update_data(selected_types=selected_types)
    await callback.message.edit_reply_markup(
        reply_markup=create_author_types_keyboard(selected_types)
    )
    await callback.answer()

@router.callback_query(AuthorTypesState.selecting, F.data == "save_authors")
async def save_author_types(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ—Ä–æ–≤"""
    if not await check_admin_access(callback.from_user.id, callback=callback):
        return
        
    data = await state.get_data()
    selected_types = data.get("selected_types", file_utils.get_author_types())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    file_utils.set_author_types(selected_types)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    author_names = {
        'developer': '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏',
        'real_estate_agent': '–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞',
        'homeowner': '–≤–ª–∞–¥–µ–ª—å—Ü—ã',
        'realtor': '—Ä–∏–µ–ª—Ç–æ—Ä—ã'
    }
    selected_names = [author_names.get(a, a) for a in selected_types]
    
    await callback.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–∏–ø—ã –∞–≤—Ç–æ—Ä–æ–≤: {', '.join(selected_names)}")
    await state.clear()
    await parsing_settings(callback.message)

@router.callback_query(AuthorTypesState.selecting, F.data == "back_to_settings")
async def back_to_settings_from_authors(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    if not await check_admin_access(callback.from_user.id, callback=callback):
        return
        
    await callback.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    await state.clear()
    await parsing_settings(callback.message)

@router.message(F.text.endswith("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω"))
async def change_region(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞"""
    if not await check_admin_access(message.from_user.id, message=message):
        return
        
    await state.set_state(RegionState.waiting_region_name)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏
    popular_regions = [
        "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å",
        "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–°–∞–º–∞—Ä–∞", "–û–º—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É"
    ]
    
    regions_text = "\n".join([f"‚Ä¢ {region}" for region in popular_regions])
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞:\n\n"
        "üîπ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:</b>\n"
        f"{regions_text}\n\n"
        "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤'",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )

@router.message(F.text.endswith("–°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤"))
async def send_regions_list(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞"""
    if not await check_admin_access(message.from_user.id, message=message):
        return
        
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–≥–∏–æ–Ω–æ–≤
        regions = cianparser.list_locations()
        regions.sort(key=lambda x: x[0].lower())
        
        filename = "available_regions.txt"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:\n")
            f.write("=" * 50 + "\n\n")
            for region in regions:
                f.write(f"‚Ä¢ {region[0]} (ID: {region[1]})\n")
        
        file = FSInputFile(filename)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_document(
            document=file,
            caption="üìã <b>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤:</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ.",
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        asyncio.create_task(file_utils.delete_file_after_delay(filename, 30))
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]],
                resize_keyboard=True
            )
        )
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤: {str(e)}")

@router.message(F.text.endswith("–í—ã–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã"))
async def select_rooms(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç"""
    if not await check_admin_access(message.from_user.id, message=message):
        return
        
    current_rooms = file_utils.get_rooms()
    keyboard = create_rooms_keyboard(current_rooms)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–Ω–∞—Ç—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –µ—ë –∏–∑ –≤—ã–±–æ—Ä–∫–∏. "
        "–ó–Ω–∞—á–æ–∫ ‚úÖ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞.\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'.",
        reply_markup=keyboard
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_data({"selected_rooms": current_rooms})
    await state.set_state(RoomState.selecting_rooms)

@router.message(F.text.endswith("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–∞–∂–∏"))
async def setup_floors(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–∂–µ–π"""
    if not await check_admin_access(message.from_user.id, message=message):
        return
        
    await state.set_state(MinFloorState.selecting_range)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û —ç—Ç–∞–∂–∞:",
        reply_markup=create_floor_range_keyboard()
    )

@router.message(F.text.endswith("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–Ω—ã"))
async def setup_prices(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω"""
    if not await check_admin_access(message.from_user.id, message=message):
        return
        
    current_min_price = file_utils.get_min_price()
    current_max_price = file_utils.get_max_price()
    
    min_price_text = "–Ω–µ –∑–∞–¥–∞–Ω–æ" if not current_min_price else f"{current_min_price:,} ‚ÇΩ".replace(",", " ")
    max_price_text = "–Ω–µ –∑–∞–¥–∞–Ω–æ" if not current_max_price else f"{current_max_price:,} ‚ÇΩ".replace(",", " ")
    
    await message.answer(
        f"üí∞ <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω:</b>\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min_price_text}\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max_price_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_price_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "min_price_set")
async def set_min_price(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    if not await check_admin_access(callback.from_user.id, callback=callback):
        return
        
    await callback.message.edit_text(
        "‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000000):\n\n"
        "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", callback_data="min_price_clear")
        ]])
    )
    await state.set_state(PriceState.min_price)

@router.callback_query(F.data == "max_price_set")
async def set_max_price(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    if not await check_admin_access(callback.from_user.id, callback=callback):
        return
        
    await callback.message.edit_text(
        "‚¨ÜÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000000):\n\n"
        "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", callback_data="max_price_clear")
        ]])
    )
    await state.set_state(PriceState.max_price)

@router.callback_query(F.data.startswith(("min_price_clear", "max_price_clear")))
async def clear_price(callback: types.CallbackQuery, state: FSMContext):
    """–û—á–∏—Å—Ç–∫–∞ —Ü–µ–Ω—ã"""
    if not await check_admin_access(callback.from_user.id, callback=callback):
        return
        
    price_type = "min_price" if callback.data.startswith("min_price") else "max_price"
    
    if price_type == "min_price":
        file_utils.set_min_price(None)
    else:
        file_utils.set_max_price(None)
    
    await callback.answer(f"‚úÖ {price_type.replace('_', ' ').capitalize()} –æ—á–∏—â–µ–Ω–∞")
    await setup_prices(callback.message, state)

@router.message(PriceState.min_price, F.text)
async def process_min_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    if not await check_admin_access(message.from_user.id, message=message):
        return
        
    if message.text == "‚ùå –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π":
        file_utils.set_min_price(None)
        await message.answer("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    else:
        try:
            price = int(message.text)
            file_utils.set_min_price(price)
            await message.answer(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price:,} ‚ÇΩ".replace(",", " "))
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000000)")
    
    await state.clear()
    await setup_prices(message, state)

@router.message(PriceState.max_price, F.text)
async def process_max_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    if not await check_admin_access(message.from_user.id, message=message):
        return
        
    if message.text == "‚ùå –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π":
        file_utils.set_max_price(None)
        await message.answer("‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    else:
        try:
            price = int(message.text)
            file_utils.set_max_price(price)
            await message.answer(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price:,} ‚ÇΩ".replace(",", " "))
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000000)")
    
    await state.clear()
    await setup_prices(message, state)

@router.callback_query(F.data == "clear_prices")
async def clear_all_prices(callback: types.CallbackQuery, state: FSMContext):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ü–µ–Ω"""
    if not await check_admin_access(callback.from_user.id, callback=callback):
        return
        
    file_utils.set_min_price(None)
    file_utils.set_max_price(None)
    await callback.answer("‚úÖ –í—Å–µ —Ü–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã")
    await setup_prices(callback.message, state)

@router.callback_query(F.data == "save_prices")
async def save_prices(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ü–µ–Ω"""
    if not await check_admin_access(callback.from_user.id, callback=callback):
        return
        
    await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await parsing_settings(callback.message)

@router.message(F.text.endswith("–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"))
async def reset_settings(message: types.Message):
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    if not await check_admin_access(message.from_user.id, message=message):
        return
        
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    file_utils.reset_settings()
    
    await message.answer(
        "‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n"
        "‚Ä¢ –†–µ–≥–∏–æ–Ω: –¢—é–º–µ–Ω—å\n"
        "‚Ä¢ –ö–æ–º–Ω–∞—Ç—ã: 1, 2, 3, 4\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂: –Ω–µ –∑–∞–¥–∞–Ω–æ\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂: –Ω–µ –∑–∞–¥–∞–Ω–æ\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: –Ω–µ –∑–∞–¥–∞–Ω–æ\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: –Ω–µ –∑–∞–¥–∞–Ω–æ\n"
        "‚Ä¢ –¢–∏–ø—ã –∞–≤—Ç–æ—Ä–æ–≤: üèóÔ∏è developer, üè¢ real_estate_agent, üè† homeowner, üëî realtor\n"
        "‚Ä¢ –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥: ‚ùå –≤—ã–∫–ª—é—á–µ–Ω",
        reply_markup=create_main_keyboard()
    )

@router.callback_query(RoomState.selecting_rooms, F.data.startswith("room_"))
async def toggle_room(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    if not await check_admin_access(callback.from_user.id, callback=callback):
        return
        
    room_num = int(callback.data.split("_")[1])
    state_data = await state.get_data()
    selected_rooms = state_data.get("selected_rooms", [])
    
    if room_num in selected_rooms:
        selected_rooms.remove(room_num)
    else:
        selected_rooms.append(room_num)
        selected_rooms.sort()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_rooms=selected_rooms)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_rooms_keyboard(selected_rooms)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()

@router.callback_query(RoomState.selecting_rooms, F.data == "save_rooms")
async def save_rooms(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç"""
    if not await check_admin_access(callback.from_user.id, callback=callback):
        return
        
    state_data = await state.get_data()
    selected_rooms = state_data.get("selected_rooms", [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    file_utils.set_rooms(selected_rooms)
    
    await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await callback.message.delete()
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await parsing_settings(callback.message)

@router.callback_query(MinFloorState.selecting_range, F.data.startswith("floor_range_"))
async def min_floor_range_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —ç—Ç–∞–∂–µ–π"""
    if not await check_admin_access(callback.from_user.id, callback=callback):
        return
        
    data = callback.data.split("_")
    if data[2] == "all":
        await state.update_data(range_start=0, range_end=0, range_name="–í—Å–µ —ç—Ç–∞–∂–∏")
        file_utils.set_min_floor([])
        await callback.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
        await state.set_state(MaxFloorState.selecting_range)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û —ç—Ç–∞–∂–∞:",
            reply_markup=create_floor_range_keyboard()
        )
        return
    else:
        start = int(data[2])
        end = int(data[3])
        await state.update_data(range_start=start, range_end=end, range_name=f"{start}-{end}")
    
    await state.set_state(MinFloorState.selecting_floors)
    current_floors = file_utils.get_min_floor()
    
    state_data = await state.get_data()
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï —ç—Ç–∞–∂–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {state_data['range_name']}:\n"
        "(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç–∞–∂, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=create_floor_selection_keyboard(
            state_data['range_start'],
            state_data['range_end'],
            current_floors
        )
    )

@router.callback_query(MinFloorState.selecting_floors, F.data.startswith("floor_"))
async def min_floor_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–∂–∞"""
    if not await check_admin_access(callback.from_user.id, callback=callback):
        return
        
    data_parts = callback.data.split("_")
    action = data_parts[1]
    state_data = await state.get_data()
    current_floors = file_utils.get_min_floor()
    
    if action == "select":  # –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
        new_floors = list(range(state_data['range_start'], state_data['range_end'] + 1))
        file_utils.set_min_floor(new_floors)
        await callback.answer("–í—Å–µ —ç—Ç–∞–∂–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤—ã–±—Ä–∞–Ω—ã!") 
    elif action == "save":  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —ç—Ç–∞–∂–∏
        current_min_floors = file_utils.get_min_floor()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–∂–∞
        min_value_for_max = max(current_min_floors) if current_min_floors else 0
        
        await callback.answer("–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        await state.set_state(MaxFloorState.selecting_range)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û —ç—Ç–∞–∂–∞:",
            reply_markup=create_floor_range_keyboard(min_value=min_value_for_max)
        )
        return
    elif action == "back":  # –ù–∞–∑–∞–¥
        await state.set_state(MinFloorState.selecting_range)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û —ç—Ç–∞–∂–∞:",
            reply_markup=create_floor_range_keyboard()
        )
        return
    else:  # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–∂–∞
        floor = int(action)
        if floor in current_floors:
            current_floors.remove(floor)
        else:
            current_floors.append(floor)
        file_utils.set_min_floor(current_floors)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=create_floor_selection_keyboard(
            state_data['range_start'],
            state_data['range_end'],
            file_utils.get_min_floor()
        )
    )
    await callback.answer()

@router.callback_query(MaxFloorState.selecting_range, F.data.startswith("floor_range_"))
async def max_floor_range_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —ç—Ç–∞–∂–µ–π"""
    if not await check_admin_access(callback.from_user.id, callback=callback):
        return
        
    data = callback.data.split("_")
    state_data = await state.get_data()
    current_min_floors = file_utils.get_min_floor()
    min_value_for_max = max(current_min_floors) if current_min_floors else 0
    
    if data[2] == "all":
        await state.update_data(range_start=0, range_end=0, range_name="–í—Å–µ —ç—Ç–∞–∂–∏")
        file_utils.set_max_floor([])
        await callback.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
        await save_floors_settings(callback.message, state)
        return
    else:
        start = int(data[2])
        end = int(data[3])
        await state.update_data(range_start=start, range_end=end, range_name=f"{start}-{end}")
    
    await state.set_state(MaxFloorState.selecting_floors)
    current_floors = file_utils.get_max_floor()
    
    state_data = await state.get_data()
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï —ç—Ç–∞–∂–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {state_data['range_name']}:\n"
        "(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç–∞–∂, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=create_floor_selection_keyboard(
            state_data['range_start'],
            state_data['range_end'],
            current_floors,
            min_value=min_value_for_max
        )
    )

@router.callback_query(MaxFloorState.selecting_floors, F.data.startswith("floor_"))
async def max_floor_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–∂–∞"""
    if not await check_admin_access(callback.from_user.id, callback=callback):
        return
        
    data_parts = callback.data.split("_")
    action = data_parts[1]
    state_data = await state.get_data()
    current_floors = file_utils.get_max_floor()
    current_min_floors = file_utils.get_min_floor()
    min_value_for_max = max(current_min_floors) if current_min_floors else 0
    
    if action == "select":  # –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
        # –§–∏–ª—å—Ç—Ä—É–µ–º —ç—Ç–∞–∂–∏ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        new_floors = [
            f for f in range(state_data['range_start'], state_data['range_end'] + 1) 
            if f >= min_value_for_max
        ]
        file_utils.set_max_floor(new_floors)
        await callback.answer("–í—Å–µ —ç—Ç–∞–∂–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤—ã–±—Ä–∞–Ω—ã!")
    elif action == "save":  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        await save_floors_settings(callback.message, state)
        return
    elif action == "back":  # –ù–∞–∑–∞–¥
        await state.set_state(MaxFloorState.selecting_range)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û —ç—Ç–∞–∂–∞:",
            reply_markup=create_floor_range_keyboard(min_value=min_value_for_max)
        )
        return
    else:  # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–∂–∞
        floor = int(action)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–∞–∂ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        if min_value_for_max > 0 and floor < min_value_for_max:
            await callback.answer("–≠—Ç–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!")
            return
            
        if floor in current_floors:
            current_floors.remove(floor)
        else:
            current_floors.append(floor)
        file_utils.set_max_floor(current_floors)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=create_floor_selection_keyboard(
            state_data['range_start'],
            state_data['range_end'],
            file_utils.get_max_floor(),
            min_value=min_value_for_max
        )
    )
    await callback.answer()

async def save_floors_settings(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç—Ç–∞–∂–µ–π –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
    min_floors = file_utils.get_min_floor()
    max_floors = file_utils.get_max_floor()
    
    min_text = "–Ω–µ –∑–∞–¥–∞–Ω–æ" if not min_floors else ", ".join(map(str, min_floors))
    max_text = "–Ω–µ –∑–∞–¥–∞–Ω–æ" if not max_floors else ", ".join(map(str, max_floors))
    
    await state.clear()
    await message.answer(
        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–∂–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂: {min_text}\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂: {max_text}\n\n"
        "–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω—ã.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]],
            resize_keyboard=True
        )
    )

@router.message(RegionState.waiting_region_name)
async def process_region_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞"""
    if not await check_admin_access(message.from_user.id, message=message):
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å
    if message.text == "–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await state.clear()
        await parsing_settings(message)
        return
        
    region_name = message.text.strip()
    locations = cianparser.list_locations()
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    found = None
    for loc in locations:
        if loc[0].lower() == region_name.lower():
            found = loc
            break
    
    if found:
        region_id = found[1]
        file_utils.set_region(region_name, region_id)
        await state.clear()
        
        await message.answer(
            f"‚úÖ <b>–†–µ–≥–∏–æ–Ω –∏–∑–º–µ–Ω–µ–Ω</b>\n"
            f"‚Ä¢ <b>–ù–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω:</b> {region_name}\n"
            f"‚Ä¢ <b>ID —Ä–µ–≥–∏–æ–Ω–∞:</b> {region_id}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–∞—Ä—Å–∏–Ω–≥–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.",
            reply_markup=create_main_keyboard(),
            parse_mode="HTML"
        )
    else:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ
        similar = []
        for loc in locations:
            if region_name.lower() in loc[0].lower():
                similar.append(loc[0])
                if len(similar) >= 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–º 5 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                    break
        
        if similar:
            suggestions = "\n".join([f"‚Ä¢ {name}" for name in similar])
            await message.answer(
                f"‚ùå <b>–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n"
                f"{suggestions}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ:",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ:"
            )

@router.message(F.text == "–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def back_to_settings(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    if not await check_admin_access(message.from_user.id, message=message):
        return
        
    await state.clear()
    await parsing_settings(message)
    